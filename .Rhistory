#| label: load-packages
#| message: false
library(tidyverse)
library(tidymodels)
library(openintro)
install.packages("openintro")
#| label: load-packages
#| message: false
library(tidyverse)
library(tidymodels)
library(openintro)
#| label: data-prep
loans <- loans_full_schema %>%
mutate(
credit_util = total_credit_utilized / total_credit_limit,
bankruptcy = as.factor(if_else(public_record_bankrupt == 0, 0, 1)),
verified_income = droplevels(verified_income),
homeownership = str_to_title(homeownership),
homeownership = fct_relevel(homeownership, "Rent", "Mortgage", "Own")
) %>%
rename(credit_checks = inquiries_last_12m) %>%
select(
interest_rate, loan_amount, verified_income,
debt_to_income, credit_util, bankruptcy, term,
credit_checks, issue_month, homeownership
)
#| label: glimpse-loans
glimpse(loans)
View(loans)
#| label: explore-loans
loans %>%
select(interest_rate) %>%
summarize(mean)
#| label: explore-loans
loans %>%
select(interest_rate) %>%
mean()
# add code to explore loans here
#| label: explore-loans
loans %>%
mean(interest_rate)
# add code to explore loans here
#| label: explore-loans
loans %>%
summarize(mean = mean(interest_rate))
# add code to explore loans here
#| label: rate-util-fit
rate_util_fit <- linear_reg() %>%
fit(interest_rate ~ credit_util, data = loans)
tidy(rate_util_fit)
#| label: rate-util-plot
#| warning: false
ggplot(loans, aes(x = credit_util, y = interest_rate)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm")
levels(loans$homeownership)
#| label: rate-home-fit
# add code here.
#| label: rate-home-fit
# add code here.
#| label: rate-home-fit
# add code here.
rate_home_fit <- linear_reg() %>%
fit(interest_rate ~ homeownership, data = loans)
tidy(rate_home_fit)
#| label: rate-util-home-fit
rate_util_home_fit <- linear_reg() %>%
fit(interest_rate ~ credit_util+homeownership, data = loans)
tidy(rate_util_home_fit)
# add code here
#| label: rate-util-home-int-fit
# add code here
rate_util_home_fit <- linear_reg() %>%
fit(interest_rate ~ credit_util*homeownership, data = loans)
tidy(rate_util_home_fit)
#| label: glance
# add code here
linear_reg() %>%
fit((interest_rate ~ credit_util*homeownership, data = loans) %>%
#| label: glance
# add code here
linear_reg() %>%
fit(interest_rate ~ credit_util*homeownership, data = loans) %>%
glance()
#| label: glance
# add code here
linear_reg() %>%
fit(interest_rate ~ credit_util*homeownership, data = loans) %>%
glance()
linear_reg() %>%
fit(interest_rate ~ credit_util+homeownership, data = loans) %>%
glance()
linear_reg() %>%
fit(interest_rate ~ credit_util, data = loans) %>%
glance()
linear_reg() %>%
fit(interest_rate ~ homeownership, data = loans) %>%
glance()
#| label: new-fit
# add code here
new_fit <- linear_reg() %>%
fit(interest_rate ~ homeownership*issue_month*credit_util, data = loans)
tidy(new_fit)
#| label: load-packages
#| message: false
library(tidyverse)
library(tidymodels)
library(openintro)
#| label: data-prep
loans <- loans_full_schema %>%
mutate(
credit_util = total_credit_utilized / total_credit_limit,
bankruptcy = as.factor(if_else(public_record_bankrupt == 0, 0, 1)),
verified_income = droplevels(verified_income),
homeownership = str_to_title(homeownership),
homeownership = fct_relevel(homeownership, "Rent", "Mortgage", "Own")
) %>%
rename(credit_checks = inquiries_last_12m) %>%
select(
interest_rate, loan_amount, verified_income,
debt_to_income, credit_util, bankruptcy, term,
credit_checks, issue_month, homeownership
)
#| label: glimpse-loans
glimpse(loans)
#| label: load-packages
#| message: false
library(tidyverse)
library(tidymodels)
library(openintro)
# add code here
glimpse(email)
# add code here
data(email)
ggplot(aes = email,
x = spam) %>%
ggplot(bar)
# add code here
data(email)
ggplot(aes = email,
x = spam) %>%
geom_bar()
# add code here
data(email)
ggplot(aes = email,
x = spam) +
geom_bar()
# add code here
data(email)
ggplot(aes = email,
x = exclaim_mess
) +
geom_bar()
View(email)
# add code here
data(email)
ggplot(aes = email,
x = spam
) +
geom_bar()
email %>%
select(spam) %>%
summarize(m = mean(spam))
# add code here
data(email)
ggplot(aes = email,
x = exclaim_mess
) +
geom_bar()
# add code here
data(email)
ggplot(aes = email,
x = exclaim_mess
) +
geom_point()
# add code here
data(email)
ggplot(aes = email,
x = exclaim_mess) +
geom_bar()
# add code here
data(email)
ggplot(aes = email,
x = exclaim_mess) +
geom_density()
# add code here
data(email)
ggplot(aes = email,
x = spam) +
geom_density()
# add code here
data(email)
ggplot(data = email, aes(x = spam)) +
geom_density()
# add code here
data(email)
ggplot(data = email, aes(x = spam, y = exclaim_mess)) +
geom_density()
# add code here
data(email)
ggplot(data = email, aes(x = spam)) +
geom_density()
ggplot(data = email, aes(x = exclaim_mess)) +
geom_density()
email %>%
filter(spam = "1") %>%
summarize(m = mean(spam))
email %>%
filter(spam == "1") %>%
summarize(m = mean(spam))
email %>%
filter(spam == "1") %>%
summarize(x = mean(exclaim_Mess))
email %>%
filter(spam == "1") %>%
summarize(x = mean(exclaim_mess))
email %>%
filter(spam == "1") %>%
summarize(mean_spam = mean(exclaim_mess))
email %>%
filter(spam == "0") %>%
summarize(mean_notspam = mean(exclaim_mess))
ggplot(data = email, aes(x = spam, y = mean_num_char)) +
geom_density()
ggplot(data = email, aes(x = spam, y = mean_num_char)) +
geom_point()
email %>%
filter(spam == "1") %>%
summarize(mean_spam = mean(exclaim_mess))
email %>%
filter(spam == "0") %>%
summarize(mean_notspam = mean(exclaim_mess))
email %>%
group_by(num_char)%>%
summarize(mean_num_char = mean(num_char))
ggplot(data = email, aes(x = spam, y = mean_num_char)) +
geom_point()
email %>%
filter(spam == "1") %>%
summarize(mean_spam = mean(exclaim_mess))
email %>%
filter(spam == "0") %>%
summarize(mean_notspam = mean(exclaim_mess))
email<-email %>%
group_by(num_char)%>%
summarize(mean_num_char = mean(num_char))
ggplot(data = email, aes(x = spam, y = mean_num_char)) +
geom_point()
View(email)
email %>%
filter(spam == "1") %>%
summarize(mean_spam = mean(exclaim_mess))
# add code here
data(email)
ggplot(data = email, aes(x = spam)) +
geom_density()
ggplot(data = email, aes(x = exclaim_mess)) +
geom_density()
email %>%
filter(spam == "1") %>%
summarize(mean_spam = mean(exclaim_mess))
email %>%
filter(spam == "0") %>%
summarize(mean_notspam = mean(exclaim_mess))
email<-email %>%
group_by(num_char)%>%
summarize(mean_num_char = mean(num_char))
# add code here
data(email)
ggplot(data = email, aes(x = spam)) +
geom_density()
ggplot(data = email, aes(x = exclaim_mess)) +
geom_density()
email %>%
filter(spam == "1") %>%
summarize(mean_spam = mean(exclaim_mess))
email %>%
filter(spam == "0") %>%
summarize(mean_notspam = mean(exclaim_mess))
email %>%
group_by(num_char)%>%
summarize(mean_num_char = mean(num_char))
email %>%
filter(spam == "1") %>%
summarize(mean_spam = mean(exclaim_mess))
email %>%
filter(spam == "0") %>%
summarize(mean_notspam = mean(exclaim_mess))
email <- email %>%
group_by(num_char)%>%
mutate(summarize(mean_num_char = mean(num_char)))
#| label: load-pkgs
#| message: false
#| warning: false
library(tidyverse)
library(neuralnet)
#| label: load-pkgs
#| message: false
#| warning: false
library(tidyverse)
library(neuralnet)
library(keras)
library(tensorflow)
#| label: load-pkgs
#| message: false
#| warning: false
library(tidyverse)
library(neuralnet)
library(keras)
library(tensorflow)
library(keras)
library(ggplot2)
library(reshape2)
library(dplyr)
#| label: load-data
#| message: false
genGauss <- function(cx, cy, num_samples, variance, label) {
x <- rnorm(num_samples, mean = cx, sd = sqrt(variance))
y <- rnorm(num_samples, mean = cy, sd = sqrt(variance))
data.frame(x = x, y = y, label = label)
}
#generates two clusters of data points
classifyTwoGaussData <- function(num_samples, noise) {
variance_scale <- function(noise) {
(1 - noise) * 0.5 + noise * 4
}
variance <- variance_scale(noise)
points1 <- genGauss(2, 2, num_samples / 2, variance, 1)
points2 <- genGauss(-2, -2, num_samples / 2, variance, -1)
# Combine  datasets
points <- rbind(points1, points2)
return(points)
}
set.seed(123)
data_two <- classifyTwoGaussData(1000, 0.1)
# show data
ggplot(data_two, aes(x = x, y = y, color = factor(label))) +
geom_point(alpha = 0.6) +
labs(title = "Classify Two Gauss Data", color = "Label") +
theme_minimal()
generateDataByX <- function(num_samples) {
x <- runif(num_samples, min = -5, max = 5)
y <- runif(num_samples, min = -5, max = 5)
label <- ifelse(x >= 0, 1, -1)
data <- data.frame(x = x, y = y, label = label)
return(data)
}
set.seed(123)
data_by_x <- generateDataByX(1000)
#plot
ggplot(data_by_x, aes(x = x, y = y, color = factor(label))) +
geom_point(alpha = 0.6) +
labs(title = "Data Classified by X Value", color = "Label") +
theme_minimal()
generateDataByXYProduct <- function(num_samples) {
x <- runif(num_samples, min = -5, max = 5)
y <- runif(num_samples, min = -5, max = 5)
label <- ifelse(x * y >= 0, 1, -1)
data <- data.frame(x = x, y = y, label = label)
return(data)
}
set.seed(123)
data_by_xy <- generateDataByXYProduct(1000)
ggplot(data_by_xy, aes(x = x, y = y, color = factor(label))) +
geom_point(alpha = 0.6) +
labs(title = "Data Classified by XY Product", color = "Label") +
theme_minimal()
# the three data sets we have
#data_two
#data_by_x
#data_by_xy
create_model <- function() {
model <- keras_model_sequential()
model %>%
layer_dense(units = 8, activation = 'relu', input_shape = c(2)) %>%
layer_dense(units = 4, activation = 'relu') %>%
layer_dense(units = 1, activation = 'sigmoid')
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
return(model)
}
# Train model for the first dataset
model1 <- create_model()
install_tensorflow()
#| label: load-pkgs
#| message: false
#| warning: false
library(tidyverse)
library(dplyr)
library(tidyr)
library(leaflet)
library(tmap)
library(readr)
#| label: load-data
#| message: false
immigration <- read_csv("data/2023_0824_plcy_state_immigration_data_sheets_fy2022.csv")
head(immigration)
